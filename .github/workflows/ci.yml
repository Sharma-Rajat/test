on: [pull_request]

jobs:
  gitlab-ci:
    runs-on: ubuntu-latest

    if: github.event.pull_request.head.repo.full_name != github.repository && github.actor != 'dependabot[bot]'

    container:
      image:  alpine/git

    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
           key: ${{ secrets.SSH_PRIVATE_KEY }}
           known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Mirror Forked Merge Branch
        run: |
          echo "TRIGGER_BRANCH='${{github.event.pull_request.number}}-${{env.GITHUB_REF_NAME}}'" >> $GITHUB_ENV

          git remote add gitlab git@gitlab.com:jdalrymple/test
          git branch '${{github.event.pull_request.number}}-${{env.GITHUB_REF_NAME}}'
          git push --force -u gitlab
        # git push --force gitlab pull/${{ github.event.pull_request.number }}

      # - name: Await CI/CD Pipeline
          # run: |
          # See if pipeline has started for branch, if not start it.
          # Poll until complete
          # sleep $POLL_TIMEOUT
          #
          # pipeline_id=$(curl --header "PRIVATE-TOKEN: $GITLAB_PASSWORD" --silent "https://${GITLAB_HOSTNAME}/api/v4/projects/${GITLAB_PROJECT_ID}/repository/commits/${branch_uri}" | jq '.last_pipeline.id')
          #
          # echo "Triggered CI for branch ${branch}"
          # echo "Working with pipeline id #${pipeline_id}"
          # echo "Poll timeout set to ${POLL_TIMEOUT}"
          #
          # ci_status="pending"
          #
          # until [[ "$ci_status" != "pending" && "$ci_status" != "running" ]]
          # do
          #    sleep $POLL_TIMEOUT
          #    ci_output=$(curl --header "PRIVATE-TOKEN: $GITLAB_PASSWORD" --silent "https://${GITLAB_HOSTNAME}/api/v4/projects/${GITLAB_PROJECT_ID}/pipelines/${pipeline_id}")
          #    ci_status=$(jq -n "$ci_output" | jq -r .status)
          #    ci_web_url=$(jq -n "$ci_output" | jq -r .web_url)
          #
          #    echo "Current pipeline status: ${ci_status}"
          #    if [ "$ci_status" = "running" ]
          #    then
          #      echo "Checking pipeline status..."
          #      curl -d '{"state":"pending", "target_url": "'${ci_web_url}'", "context": "gitlab-ci"}' -H "Authorization: token ${GITHUB_TOKEN}"  -H "Accept: application/vnd.github.antiope-preview+json" -X POST --silent "https://api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${GITHUB_SHA}"  > /dev/null
          #    fi
          # done
          #
          # echo "Pipeline finished with status ${ci_status}"
          #
          # echo "Fetching all GitLab pipeline jobs involved"
          # ci_jobs=$(curl --header "PRIVATE-TOKEN: $GITLAB_PASSWORD" --silent "https://${GITLAB_HOSTNAME}/api/v4/projects/${GITLAB_PROJECT_ID}/pipelines/${pipeline_id}/jobs" | jq -r '.[] | { id, name, stage }')
          # echo "Posting output from all GitLab pipeline jobs"
          # for JOB_ID in $(echo $ci_jobs | jq -r .id); do
          #   echo "##[group]Stage $( echo $ci_jobs | jq -r "select(.id=="$JOB_ID") | .stage" ) / Job $( echo $ci_jobs | jq -r "select(.id=="$JOB_ID") | .name" )"
          #   curl --header "PRIVATE-TOKEN: $GITLAB_PASSWORD" --silent "https://${GITLAB_HOSTNAME}/api/v4/projects/${GITLAB_PROJECT_ID}/jobs/${JOB_ID}/trace"
          #   echo "##[endgroup]"
          # done
          # echo "Debug problems by unfolding stages/jobs above"
          #
          # if [ "$ci_status" = "success" ]
          # then
          #   curl -d '{"state":"success", "target_url": "'${ci_web_url}'", "context": "gitlab-ci"}' -H "Authorization: token ${GITHUB_TOKEN}"  -H "Accept: application/vnd.github.antiope-preview+json" -X POST --silent "https://api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${GITHUB_SHA}"
          #   exit 0
          # elif [ "$ci_status" = "failed" ]
          # then
          #   curl -d '{"state":"failure", "target_url": "'${ci_web_url}'", "context": "gitlab-ci"}' -H "Authorization: token ${GITHUB_TOKEN}"  -H "Accept: application/vnd.github.antiope-preview+json" -X POST --silent "https://api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${GITHUB_SHA}"
          #   exit 1
          # fi

      - name: Clean up
        if: github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]'
        run: |
          git branch -d ${{env.TRIGGER_BRANCH}}
          git push origin --delete ${{env.TRIGGER_BRANCH}}
